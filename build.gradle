plugins {
    id 'java'
}

group "focus"


sourceSets.main {
    java.srcDir("src/")
    resources.srcDir("assets/")
}

ext {
    mindustryVersion = "v146"
}

repositories {
    mavenCentral()
    maven {url "https://jitpack.io"}
}

jar {
    archiveFileName.set pArtifactFilename

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}


dependencies{
    annotationProcessor 'com.github.Anuken:jabel:0.8.0'
    compileOnly "com.github.anuken.mindustryjitpack:core:$mindustryVersion"
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
}

task dexify(type: Jar) {
    archiveName "dexed-$pArtifactFilename"

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, pArtifactFilename),
               dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "dexed.jar")
    doFirst {
        exec {
            workingDir dexedArtifact.parent
            def command = ["d8", "--min-api", pMinApi, "--output", dexedArtifact, jarArtifact]
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows'))
                commandLine("cmd", "/c", *command)
            else
                commandLine(*command)

        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

task buildDex dependsOn "build", "dexify"

tasks.withType(JavaCompile){
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_16
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        options.compilerArgs.addAll(['--release', '8'])
    }
    compileJava.options.fork = true

    options.forkOptions.jvmArgs += [
            '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED'
    ]
}
